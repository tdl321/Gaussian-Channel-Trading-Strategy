# Gaussian Channel Trading Bot - Project Rules & Current Implementation

## Project Overview
A fully-automated, trend-following trading bot using a Gaussian Channel strategy for Hyperliquid exchange. The bot connects to Hyperliquid using their Python SDK directly, implements long-only Gaussian Channel strategy with dynamic exit logic, and supports both backtesting and live trading.

## Current Project Structure
```
gaussian_bot_hype/
├── main.py                   # ✅ LIVE TRADING BOT (301 lines)
├── config.py                 # ✅ CONFIGURATION SYSTEM (78 lines)
├── strategy/
│   ├── gaussian_filter.py    # ✅ GAUSSIAN FILTER ENGINE (155 lines)
│   ├── signals.py            # ✅ SIGNAL GENERATION (286 lines)
│   └── backtest.py           # ✅ BACKTESTING ENGINE (325 lines)
├── hyperliquid/              # ✅ FULL SDK INTEGRATION
│   ├── exchange.py           # Trading execution (1120 lines)
│   ├── info.py              # Market data (629 lines)
│   └── utils/               # Authentication & types
├── tests/                    # ✅ TEST SUITE
│   ├── test_gaussian_filter.py
│   ├── test_signal_generation.py
│   └── run_tests.py
├── data/
│   └── btc_1d_data_2018_to_2025.csv  # ✅ HISTORICAL DATA (2774 days)
├── logs/                    # ✅ Log files
└── results/                 # ✅ Backtest results
```

## Core Strategy Parameters (CURRENT)
- **Type**: Long-only trend-following strategy
- **Core Signal**: When price closes above dynamic Gaussian upper band
- **Exit**: When price closes below the upper band (dynamic stop-loss)
- **Parameters**: 
  - Poles: 6 (updated from 4)
  - Sampling period: 144 days
  - Multiplier: 1.414
  - ATR(14) for volatility scaling (kept for channel calculation)
- **Position Size**: 100% of available collateral per trade
- **No Pyramiding**: Single position only

## Hyperliquid SDK Integration (CURRENT)

### Direct SDK Usage (No Wrapper Needed)
- **`hyperliquid/exchange.py`** - Direct order execution
- **`hyperliquid/info.py`** - Direct market data access
- **`hyperliquid/utils/signing.py`** - Authentication
- **`hyperliquid/utils/error.py`** - Error handling

### Data Format Specifications (CURRENT)

#### Candle Data Format (from `info.candles_snapshot()`)
```python
[
    {
        "T": 1681924499999,        # End timestamp (integer, milliseconds)
        "c": "29258.0",           # Close price (string)
        "h": "29309.0",           # High price (string)
        "i": "15m",               # Interval (string)
        "l": "29250.0",           # Low price (string)
        "n": 189,                 # Number of trades (integer)
        "o": "29295.0",           # Open price (string)
        "s": "BTC",               # Symbol (string)
        "t": 1681923600000,       # Start timestamp (integer, milliseconds)
        "v": "0.98639"            # Volume (string)
    }
]
```

#### Position Data Format (from `info.user_state()`)
```python
{
    "assetPositions": [
        {
            "position": {
                "coin": "BTC",                    # Symbol
                "entryPx": "45000.0",            # Entry price (string)
                "leverage": {
                    "type": "cross",              # "cross" or "isolated"
                    "value": 10,                  # Leverage multiplier
                    "rawUsd": "1000.0"           # Only for isolated
                },
                "liquidationPx": "40000.0",      # Liquidation price
                "marginUsed": "100.0",           # Margin used (string)
                "positionValue": "4500.0",       # Position value (string)
                "returnOnEquity": "0.05",        # ROE (string)
                "szi": "0.1",                    # Position size (string) - POSITIVE = LONG, NEGATIVE = SHORT
                "unrealizedPnl": "50.0"          # Unrealized PnL (string)
            }
        }
    ],
    "marginSummary": {
        "accountValue": "5000.0",                # Total account value
        "totalMarginUsed": "100.0",              # Total margin used
        "totalNtlPos": "4500.0",                 # Total notional position
        "totalRawUsd": "5000.0"                  # Raw USD balance
    }
}
```

### Symbol Format
- Use base symbols only: `"BTC"`, `"ETH"`, `"SOL"` (NO "-PERP" suffix)
- Case-sensitive
- Available symbols: `BTC`, `ETH`, `SOL`, `ATOM`, `MATIC`, `DYDX`, `kPEPE`, etc.

## Current Implementation Details

### 1. Data Conversion (IMPLEMENTED)
- Convert Hyperliquid candle format to pandas DataFrame in `main.py`
- Handle string-to-float conversions for all prices
- Convert millisecond timestamps to datetime
- Standardize column names: `['Open', 'High', 'Low', 'Close', 'Volume']`

### 2. Trading Interface (IMPLEMENTED)
- **Buy Orders**: `exchange.market_open(symbol, True, size)` - Direct SDK call
- **Sell Orders**: `exchange.market_close(symbol)` - Direct SDK call
- **Position Tracking**: `info.user_state(address)` - Direct SDK call
- **Account Balance**: `info.user_state(address)['marginSummary']['accountValue']`

### 3. Real-time Data (IMPLEMENTED)
- **Current Prices**: `info.all_mids()` - Poll every TRADING_INTERVAL seconds
- **Candle Data**: `info.candles_snapshot()` - Poll every cycle for strategy
- **Position Updates**: `info.user_state()` - Poll every cycle
- **Order Execution**: Direct SDK calls with error handling

## Configuration (CURRENT)

### Environment Variables (.env)
```env
# API Credentials
HYPERLIQUID_API_KEY=your_api_key_here
HYPERLIQUID_SECRET_KEY=your_private_key_here
HYPERLIQUID_BASE_URL=https://api.hyperliquid.xyz

# Trading Parameters
TRADING_SYMBOL=BTC
LEVERAGE=5

# Strategy Parameters (CURRENT)
GAUSSIAN_POLES=6
GAUSSIAN_PERIOD=144
GAUSSIAN_MULTIPLIER=1.414

# Timing
TRADING_INTERVAL=3600  # 1 hour (configurable)

# Logging
LOG_LEVEL=INFO
```

### Timing Parameters (CURRENT)
- **TRADING_INTERVAL**: How often to check for signals (default: 3600 seconds = 1 hour)
- **Common Options**:
  - 900 seconds (15 minutes) - High frequency
  - 1800 seconds (30 minutes) - Moderate frequency
  - 3600 seconds (1 hour) - **Current default**
  - 7200 seconds (2 hours) - Lower frequency
  - 86400 seconds (24 hours) - Daily only

## Current Status

### ✅ COMPLETED COMPONENTS
- **Live Trading Bot**: Fully functional with direct SDK integration
- **Gaussian Filter**: Exact Pine Script implementation (6 poles, 144 period, 1.414 multiplier)
- **Signal Generation**: Non-repainting logic with confirmed vs current bar data
- **Backtesting Engine**: Advanced backtrader-based with margin calls and slippage
- **Configuration System**: Environment-based with validation
- **Test Suite**: Comprehensive tests for filter and signal generation
- **Data Processing**: Real-time candle conversion and strategy calculation
- **Error Handling**: Comprehensive exception handling throughout

### ⚠️ REMOVED COMPONENTS (No Longer Needed)
- **execution/executor.py** - Deleted (direct SDK usage)
- **execution/position_manager.py** - Deleted (direct SDK usage)
- **utils/performance.py** - Deleted (built-in logging sufficient)
- **utils/logging_config.py** - Deleted (built-in logging sufficient)
- **hyperliquid_api.py** - Not needed (direct SDK usage)

## Key Technical Requirements (CURRENT)

### Historical Data Requirements
- **Strategy Warm-up**: 200-300 days minimum
- **Gaussian Filter**: 144-day sampling period + 25 days buffer = 169 days minimum
- **Available Data**: 2774 days (2018-2025) - EXCELLENT for backtesting
- **Data Quality**: Daily candles for backtesting, real-time for live trading

### Risk Management (CURRENT)
- **Max Leverage**: 5x (configurable via LEVERAGE env var)
- **Position Sizing**: 100% of available collateral per trade
- **No Pyramiding**: Single position only
- **Dynamic Exit**: Price below upper band

### Performance Metrics (Available via Backtesting)
- **Sharpe Ratio**: Risk-adjusted returns
- **Maximum Drawdown**: Peak-to-trough decline
- **Win Rate**: Percentage of profitable trades
- **Profit Factor**: Gross profit / Gross loss

## Testing Strategy (CURRENT)
1. **Unit Tests**: ✅ Gaussian filter and signal generation tests
2. **Integration Tests**: ✅ SDK connectivity and data flow
3. **Backtesting**: ✅ Historical performance validation
4. **Live Trading**: ✅ Ready for deployment

## Deployment Requirements (CURRENT)
- **Render Server**: Python environment with >=2GB RAM
- **Persistent Storage**: 10-50MB for historical data
- **Network**: Low bandwidth (~1kb/sec during live trading)
- **Monitoring**: Built-in logging system

## Success Criteria (CURRENT)
- **Strategy Performance**: Positive Sharpe ratio > 1.0
- **Risk Management**: Max drawdown < 20%
- **Execution Quality**: Direct SDK calls with error handling
- **Uptime**: 99.9% availability during market hours
- **Profitability**: Consistent positive returns over 6+ months

## Code Quality Standards (CURRENT)
- **Type Hints**: ✅ All functions have proper type annotations
- **Error Handling**: ✅ Comprehensive exception handling with logging
- **Documentation**: ✅ Clear docstrings for all classes and methods
- **Testing**: ✅ Test suite with 100% core component coverage
- **Logging**: ✅ Structured logging for debugging and monitoring

## Security Considerations (CURRENT)
- **API Keys**: ✅ Secure storage in environment variables
- **Private Keys**: ✅ Never hardcode wallet private keys
- **Network Security**: ✅ Use HTTPS for all API communications
- **Access Control**: ✅ Limit API key permissions to trading only
- **Audit Trail**: ✅ Log all trading decisions and executions

## Maintenance Plan (CURRENT)
- **Daily**: Monitor performance metrics and error logs
- **Weekly**: Review strategy performance and adjust parameters
- **Monthly**: Comprehensive backtesting with new data
- **Quarterly**: Strategy optimization and walk-forward analysis
- **Annually**: Full system audit and performance review

## Next Actions (CURRENT)
1. ✅ **Run backtests** to validate strategy performance
2. ✅ **Test live trading** with small position sizes
3. ✅ **Deploy to Render** for 24/7 operation
4. ✅ **Monitor performance** and adjust parameters as needed

## Current Architecture Philosophy
- **Direct SDK Integration**: No unnecessary abstraction layers
- **Minimal Code**: Less code = fewer bugs
- **Built-in Tools**: Use Python's built-in logging and data structures
- **Simple Configuration**: Environment variables for all settings
- **Comprehensive Testing**: Validate core components before live trading 