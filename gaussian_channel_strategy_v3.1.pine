//@version=6
strategy(title="Gaussian Channel Strategy v3.1 Demo", overlay=true, initial_capital=10000, default_qty_type=strategy.percent_of_equity, default_qty_value=100, pyramiding=5, commission_type=strategy.commission.percent, commission_value=0.1, slippage=1, calc_on_every_tick=false, fill_orders_on_standard_ohlc=true)

// === INPUTS ===
// Date Range Filter
startDate = input.time(timestamp("2018-01-01 00:00"), title="Start Date")
endDate = input.time(timestamp("2069-12-31 00:00"), title="End Date")

// Channel Controls
src = input(hlc3, title="Source")
N = input.int(4, title="Poles", minval=1, maxval=9)
per = input.int(144, title="Sampling Period", minval=2)
mult = input.float(1.414, title="Filtered True Range Multiplier", minval=0)

// Optional Controls
modeLag = input.bool(false, title="Reduced Lag Mode")
modeFast = input.bool(false, title="Fast Response Mode")



// === GAUSSIAN CHANNEL FUNCTIONS (Pine Script v6) ===
// Filter function - courtesy of @e2e4mfck, converted to v6
f_filt9x(_a, _s, _i) => 
    var int _m2 = 0, var int _m3 = 0, var int _m4 = 0, var int _m5 = 0, var int _m6 = 0
    var int _m7 = 0, var int _m8 = 0, var int _m9 = 0, var float _f = 0.0
    _x = (1 - _a)
    // Weights. 
    // Initial weight _m1 is a pole number and equal to _i
    _m2 := _i == 9 ? 36  : _i == 8 ? 28 : _i == 7 ? 21 : _i == 6 ? 15 : _i == 5 ? 10 : _i == 4 ? 6 : _i == 3 ? 3 : _i == 2 ? 1 : 0
    _m3 := _i == 9 ? 84  : _i == 8 ? 56 : _i == 7 ? 35 : _i == 6 ? 20 : _i == 5 ? 10 : _i == 4 ? 4 : _i == 3 ? 1 : 0
    _m4 := _i == 9 ? 126 : _i == 8 ? 70 : _i == 7 ? 35 : _i == 6 ? 15 : _i == 5 ? 5  : _i == 4 ? 1 : 0
    _m5 := _i == 9 ? 126 : _i == 8 ? 56 : _i == 7 ? 21 : _i == 6 ? 6  : _i == 5 ? 1  : 0 
    _m6 := _i == 9 ? 84  : _i == 8 ? 28 : _i == 7 ? 7  : _i == 6 ? 1  : 0 
    _m7 := _i == 9 ? 36  : _i == 8 ? 8  : _i == 7 ? 1  : 0 
    _m8 := _i == 9 ? 9   : _i == 8 ? 1  : 0 
    _m9 := _i == 9 ? 1   : 0
    // filter
    _f :=   math.pow(_a, _i) * nz(_s) + 
      _i  *     _x      * nz(_f[1])      - (_i >= 2 ? 
      _m2 * math.pow(_x, 2)  * nz(_f[2]) : 0) + (_i >= 3 ? 
      _m3 * math.pow(_x, 3)  * nz(_f[3]) : 0) - (_i >= 4 ? 
      _m4 * math.pow(_x, 4)  * nz(_f[4]) : 0) + (_i >= 5 ? 
      _m5 * math.pow(_x, 5)  * nz(_f[5]) : 0) - (_i >= 6 ? 
      _m6 * math.pow(_x, 6)  * nz(_f[6]) : 0) + (_i >= 7 ? 
      _m7 * math.pow(_x, 7)  * nz(_f[7]) : 0) - (_i >= 8 ? 
      _m8 * math.pow(_x, 8)  * nz(_f[8]) : 0) + (_i == 9 ? 
      _m9 * math.pow(_x, 9)  * nz(_f[9]) : 0)

// 9 var declaration fun
f_pole(_a, _s, _i) =>
    _f1 =            f_filt9x(_a, _s, 1)
    _f2 = (_i >= 2 ? f_filt9x(_a, _s, 2) : 0)
    _f3 = (_i >= 3 ? f_filt9x(_a, _s, 3) : 0)
    _f4 = (_i >= 4 ? f_filt9x(_a, _s, 4) : 0)
    _f5 = (_i >= 5 ? f_filt9x(_a, _s, 5) : 0)
    _f6 = (_i >= 6 ? f_filt9x(_a, _s, 6) : 0)
    _f7 = (_i >= 7 ? f_filt9x(_a, _s, 7) : 0)
    _f8 = (_i >= 8 ? f_filt9x(_a, _s, 8) : 0)
    _f9 = (_i == 9 ? f_filt9x(_a, _s, 9) : 0)
    _fn = _i == 1 ? _f1 : _i == 2 ? _f2 : _i == 3 ? _f3 :
      _i == 4     ? _f4 : _i == 5 ? _f5 : _i == 6 ? _f6 :
      _i == 7     ? _f7 : _i == 8 ? _f8 : _i == 9 ? _f9 : na
    [_fn, _f1]

// === GAUSSIAN CHANNEL CALCULATIONS ===
// Beta and Alpha Components
beta  = (1 - math.cos(4*math.asin(1)/per)) / (math.pow(1.414, 2/N) - 1)
alpha = - beta + math.sqrt(math.pow(beta, 2) + 2*beta)

// Lag
lag = (per - 1)/(2*N)

// Data
srcdata = modeLag ? src + (src - src[lag]) : src
trdata  = modeLag ? ta.tr(true) + (ta.tr(true) - ta.tr(true)[lag]) : ta.tr(true)

// Filtered Values
[filtn, filt1]     = f_pole(alpha, srcdata, N)
[filtntr, filt1tr] = f_pole(alpha, trdata,  N)

// Lag Reduction
filt   = modeFast ? (filtn + filt1)/2 : filtn
filttr = modeFast ? (filtntr + filt1tr)/2 : filtntr

// Bands
hband = filt + filttr*mult
lband = filt - filttr*mult

// === GREEN CHANNEL CONDITION ===
// Define "green channel" when filter is rising
fcolor = filt > filt[1] ? color.new(#0aff68, 0) : filt < filt[1] ? color.new(#ff0a5a, 0) : color.new(#cccccc, 0)
greenChannel = filt > filt[1]



// === DATE RANGE FILTER ===
inDateRange = time >= startDate and time <= endDate

// === ENTRY AND EXIT CONDITIONS ===
longCondition = inDateRange and greenChannel and close > hband
exitCondition = close < hband

// === STRATEGY EXECUTION ===
if longCondition and strategy.position_size == 0
    strategy.entry("Long", strategy.long)

if exitCondition and strategy.position_size > 0
    strategy.close("Long")

// === VISUALS ===
// Plot Filter and Bands
filtplot = plot(filt, title="Filter", color=fcolor, linewidth=3)
hbandplot = plot(hband, title="Filtered True Range High Band", color=fcolor)
lbandplot = plot(lband, title="Filtered True Range Low Band", color=fcolor)

// Channel Fill
channelFillColor = filt > filt[1] ? color.new(#0aff68, 80) : color.new(#ff0a5a, 80)
fill(hbandplot, lbandplot, title="Channel Fill", color=channelFillColor)



// === TABLE FOR STRATEGY INFO ===
if barstate.islast
    var table infoTable = table.new(position.top_right, 2, 7, bgcolor=color.white, border_width=1)
    table.cell(infoTable, 0, 0, "Strategy Info", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 1, 0, "Value", text_color=color.black, bgcolor=color.gray)
    table.cell(infoTable, 0, 1, "Filter", text_color=color.black)
    table.cell(infoTable, 1, 1, str.tostring(math.round(filt, 2)), text_color=color.black)
    table.cell(infoTable, 0, 2, "Upper Band", text_color=color.black)
    table.cell(infoTable, 1, 2, str.tostring(math.round(hband, 2)), text_color=color.black)
    table.cell(infoTable, 0, 3, "Lower Band", text_color=color.black)
    table.cell(infoTable, 1, 3, str.tostring(math.round(lband, 2)), text_color=color.black)
    table.cell(infoTable, 0, 4, "Green Channel", text_color=color.black)
    table.cell(infoTable, 1, 4, greenChannel ? "✓" : "✗", text_color=greenChannel ? color.green : color.red)
    table.cell(infoTable, 0, 5, "Position", text_color=color.black)
    table.cell(infoTable, 1, 5, strategy.position_size > 0 ? "Long" : "Flat", text_color=strategy.position_size > 0 ? color.green : color.gray)
    table.cell(infoTable, 0, 6, "In Date Range", text_color=color.black)
    table.cell(infoTable, 1, 6, inDateRange ? "✓" : "✗", text_color=inDateRange ? color.green : color.red) 